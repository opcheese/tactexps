;;
;; Header files for NFTItem
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $NftTransfer$_load
(slice, ((int, slice, slice, cell, int, slice))) $NftTransfer$_load(slice sc_0) inline_ref;

;; $NftExcesses$_store
builder $NftExcesses$_store(builder build_0, (int) v) inline;

;; $NftExcesses$_store_cell
cell $NftExcesses$_store_cell((int) v) inline;

;; $NftGetStaticData$_load
(slice, ((int))) $NftGetStaticData$_load(slice sc_0) inline;

;; $NftOwnershipAssigned$_store
builder $NftOwnershipAssigned$_store(builder build_0, (int, slice, slice) v) inline;

;; $NftOwnershipAssigned$_store_cell
cell $NftOwnershipAssigned$_store_cell((int, slice, slice) v) inline;

;; $NftReportStaticData$_store
builder $NftReportStaticData$_store(builder build_0, (int, int, slice) v) inline;

;; $NftReportStaticData$_store_cell
cell $NftReportStaticData$_store_cell((int, int, slice) v) inline;

;; $NftGetRoyaltyParams$_load
(slice, ((int))) $NftGetRoyaltyParams$_load(slice sc_0) inline;

;; $NftReportRoyaltyParams$_store
builder $NftReportRoyaltyParams$_store(builder build_0, (int, int, int, slice) v) inline;

;; $NftReportRoyaltyParams$_store_cell
cell $NftReportRoyaltyParams$_store_cell((int, int, int, slice) v) inline;

;; $NftDestroy$_load
(slice, ((int))) $NftDestroy$_load(slice sc_0) inline;

;; $NFTItem$_store
builder $NFTItem$_store(builder build_0, (int, slice, slice, int, cell, slice, int, int) v) inline;

;; $NFTItem$_load
(slice, ((int, slice, slice, int, cell, slice, int, int))) $NFTItem$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $NftData$_to_external
(int, int, slice, slice, cell) $NftData$_to_external(((int, int, slice, slice, cell)) v) inline;

;; $NftRoyaltyParams$_to_external
(int, int, slice) $NftRoyaltyParams$_to_external(((int, int, slice)) v) inline;

;; $NFTItem$init$_load
(slice, ((slice, int, cell, slice, slice, int, int))) $NFTItem$init$_load(slice sc_0) inline_ref;

;; $NFTItem$_contract_init
(int, slice, slice, int, cell, slice, int, int) $NFTItem$_contract_init(slice $collection, int $index, cell $content, slice $owner, slice $royalty_destination, int $numerator, int $denominator) impure inline_ref;

;; $NFTItem$_contract_load
(int, slice, slice, int, cell, slice, int, int) $NFTItem$_contract_load() impure inline_ref;

;; $NFTItem$_contract_store
() $NFTItem$_contract_store((int, slice, slice, int, cell, slice, int, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $NFTItem$_fun_forward
((int, slice, slice, int, cell, slice, int, int), ()) $NFTItem$_fun_forward((int, slice, slice, int, cell, slice, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $NFTItem$_fun_notify
((int, slice, slice, int, cell, slice, int, int), ()) $NFTItem$_fun_notify((int, slice, slice, int, cell, slice, int, int) $self, cell $body) impure inline;

;; $NftData$_constructor_deployed_index_collection_owner_content
((int, int, slice, slice, cell)) $NftData$_constructor_deployed_index_collection_owner_content(int deployed, int index, slice collection, slice owner, cell content) inline;

;; $NFTItem$_fun_get_nft_data
((int, slice, slice, int, cell, slice, int, int), (int, int, slice, slice, cell)) $NFTItem$_fun_get_nft_data((int, slice, slice, int, cell, slice, int, int) $self) impure inline_ref;

;; $NFTItem$_fun_owner
((int, slice, slice, int, cell, slice, int, int), slice) $NFTItem$_fun_owner((int, slice, slice, int, cell, slice, int, int) $self) impure inline_ref;

;; $NftRoyaltyParams$_constructor_numerator_denominator_royalty_destination
((int, int, slice)) $NftRoyaltyParams$_constructor_numerator_denominator_royalty_destination(int numerator, int denominator, slice royalty_destination) inline;

;; $NFTItem$_fun_royalty_params
((int, slice, slice, int, cell, slice, int, int), (int, int, slice)) $NFTItem$_fun_royalty_params((int, slice, slice, int, cell, slice, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $NftExcesses$_constructor_query_id
((int)) $NftExcesses$_constructor_query_id(int query_id) inline;

;; $NftOwnershipAssigned$_constructor_query_id_prev_owner_forward_payload
((int, slice, slice)) $NftOwnershipAssigned$_constructor_query_id_prev_owner_forward_payload(int query_id, slice prev_owner, slice forward_payload) inline;

;; $SendParameters$_constructor_to_value_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body(slice to, int value, cell body) inline;

;; $NftReportStaticData$_constructor_query_id_index_collection
((int, int, slice)) $NftReportStaticData$_constructor_query_id_index_collection(int query_id, int index, slice collection) inline;

;; $NftReportRoyaltyParams$_constructor_query_id_numerator_denominator_destination
((int, int, int, slice)) $NftReportRoyaltyParams$_constructor_query_id_numerator_denominator_destination(int query_id, int numerator, int denominator, slice destination) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
