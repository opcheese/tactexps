;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_data_code_body(slice to, int value, int mode, int bounce, cell data, cell code, cell body) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: NftRoyaltyParams
;; TLB: _ numerator:int257 denominator:int257 royalty_destination:address = NftRoyaltyParams
;;

(int, int, slice) $NftRoyaltyParams$_to_external(((int, int, slice)) v) inline {
    var (v'numerator, v'denominator, v'royalty_destination) = v; 
    return (v'numerator, v'denominator, v'royalty_destination);
}

((int, int, slice)) $NftRoyaltyParams$_constructor_numerator_denominator_royalty_destination(int numerator, int denominator, slice royalty_destination) inline {
    return (numerator, denominator, royalty_destination);
}

;;
;; Type: NftGetRoyaltyParams
;; Header: 0x693d3950
;; TLB: nft_get_royalty_params#693d3950 query_id:uint64 = NftGetRoyaltyParams
;;

(slice, ((int))) $NftGetRoyaltyParams$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1765620048);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'query_id));
}

;;
;; Type: NftReportRoyaltyParams
;; Header: 0xa8cb00ad
;; TLB: nft_report_royalty_params#a8cb00ad query_id:uint64 numerator:uint16 denominator:uint16 destination:address = NftReportRoyaltyParams
;;

builder $NftReportRoyaltyParams$_store(builder build_0, (int, int, int, slice) v) inline {
    var (v'query_id, v'numerator, v'denominator, v'destination) = v;
    build_0 = store_uint(build_0, 2831876269, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'numerator, 16);
    build_0 = build_0.store_uint(v'denominator, 16);
    build_0 = __tact_store_address(build_0, v'destination);
    return build_0;
}

cell $NftReportRoyaltyParams$_store_cell((int, int, int, slice) v) inline {
    return $NftReportRoyaltyParams$_store(begin_cell(), v).end_cell();
}

((int, int, int, slice)) $NftReportRoyaltyParams$_constructor_query_id_numerator_denominator_destination(int query_id, int numerator, int denominator, slice destination) inline {
    return (query_id, numerator, denominator, destination);
}

;;
;; Type: NftDeploy
;; Header: 0xc69df33d
;; TLB: nft_deploy#c69df33d index:uint256 owner:address content:^cell royalty_destination:address numerator:uint16 denominator:uint16 = NftDeploy
;;

builder $NftDeploy$_store(builder build_0, (int, slice, cell, slice, int, int) v) inline_ref {
    var (v'index, v'owner, v'content, v'royalty_destination, v'numerator, v'denominator) = v;
    build_0 = store_uint(build_0, 3332240189, 32);
    build_0 = build_0.store_uint(v'index, 256);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'content);
    build_0 = __tact_store_address(build_0, v'royalty_destination);
    build_0 = build_0.store_uint(v'numerator, 16);
    build_0 = build_0.store_uint(v'denominator, 16);
    return build_0;
}

cell $NftDeploy$_store_cell((int, slice, cell, slice, int, int) v) inline {
    return $NftDeploy$_store(begin_cell(), v).end_cell();
}

((int, slice, cell, slice, int, int)) $NftDeploy$_constructor_index_owner_content_royalty_destination_numerator_denominator(int index, slice owner, cell content, slice royalty_destination, int numerator, int denominator) inline {
    return (index, owner, content, royalty_destination, numerator, denominator);
}

;;
;; Type: RequestNftDeploy
;; Header: 0x5412742a
;; TLB: request_nft_deploy#5412742a index:uint256 amount:coins owner:address content:^cell = RequestNftDeploy
;;

(slice, ((int, int, slice, cell))) $RequestNftDeploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1410495530);
    var v'index = sc_0~load_uint(256);
    var v'amount = sc_0~load_coins();
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    return (sc_0, (v'index, v'amount, v'owner, v'content));
}

;;
;; Type: NftCollectionData
;; TLB: _ next_index:int257 content:^cell owner:address = NftCollectionData
;;

(int, cell, slice) $NftCollectionData$_to_external(((int, cell, slice)) v) inline {
    var (v'next_index, v'content, v'owner) = v; 
    return (v'next_index, v'content, v'owner);
}

((int, cell, slice)) $NftCollectionData$_constructor_next_index_content_owner(int next_index, cell content, slice owner) inline {
    return (next_index, content, owner);
}

;;
;; Type: NftItem
;;

builder $NftItem$init$_store(builder build_0, (slice, int) v) inline {
    var (v'collection, v'index) = v;
    build_0 = __tact_store_address(build_0, v'collection);
    build_0 = build_0.store_int(v'index, 257);
    return build_0;
}

(cell, cell) $NftItem$_init_child(cell sys', slice $collection, int $index) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: NftItem
    cell mine = __tact_dict_get_code(source, 31210);
    contracts = __tact_dict_set_code(contracts, 31210, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $NftItem$init$_store(b, ($collection, $index));
    return (mine, b.end_cell());
}

;;
;; Type: NftCollection
;;

builder $NftCollection$_store(builder build_0, (slice, int, cell, slice, int, int) v) inline {
    var (v'owner, v'next_index, v'content, v'royalty_destination, v'numerator, v'denominator) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'next_index, 256);
    build_0 = build_0.store_ref(v'content);
    build_0 = __tact_store_address(build_0, v'royalty_destination);
    build_0 = build_0.store_uint(v'numerator, 16);
    build_0 = build_0.store_uint(v'denominator, 16);
    return build_0;
}

(slice, ((slice, int, cell, slice, int, int))) $NftCollection$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'next_index = sc_0~load_uint(256);
    var v'content = sc_0~load_ref();
    var v'royalty_destination = sc_0~__tact_load_address();
    var v'numerator = sc_0~load_uint(16);
    var v'denominator = sc_0~load_uint(16);
    return (sc_0, (v'owner, v'next_index, v'content, v'royalty_destination, v'numerator, v'denominator));
}

(slice, ((slice, cell, slice, int, int))) $NftCollection$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    var v'royalty_destination = sc_0~__tact_load_address();
    var v'numerator = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'denominator = sc_1~load_int(257);
    return (sc_0, (v'owner, v'content, v'royalty_destination, v'numerator, v'denominator));
}

(slice, int, cell, slice, int, int) $NftCollection$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NftCollection$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, cell content, slice royalty_destination, int numerator, int denominator) = $sc~$NftCollection$init$_load();
        $sc.end_parse();
        return $NftCollection$_contract_init(owner, content, royalty_destination, numerator, denominator);
    }
}

() $NftCollection$_contract_store((slice, int, cell, slice, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $NftCollection$_store(b, v);
    set_data(b.end_cell());
}